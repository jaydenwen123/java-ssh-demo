/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.wxf.struts.action;

import java.sql.Timestamp;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.actions.DispatchAction;

import com.wxf.domain.Examtype;
import com.wxf.domain.Question;
import com.wxf.service.ExamtypeService;
import com.wxf.service.QuestionService;
import com.wxf.struts.form.QuestionForm;

/** 
 * MyEclipse Struts
 * Creation date: 08-02-2016
 * 
 * XDoclet definition:
 * @struts.action path="/dealQuestion" name="questionForm" parameter="flag" scope="request"
 */
public class DealQuestionAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	@Resource
	private  QuestionService questionService;
	@Resource
	private  ExamtypeService examtypeService;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toQuestionManager(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//ActionServlet actionServlet=new ActionServlet();
		//QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
		return mapping.findForward("toQuestionManager");
	}
	
	public ActionForward toAddQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
		return mapping.findForward("addQuestion");
	}
	
	public ActionForward addQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
		Question question=new Question();
		//question.setExamtype(examtype);
//		question.setId(id)
		question.setQutitle(questionForm.getQutitle());
		question.setQuhard(questionForm.getQuhard());
		question.setQuscore(Integer.parseInt(questionForm.getQuscore()));
		//question.setExamtype();
		question.setQuAnswer(questionForm.getQuAnswer());
		question.setQutype(questionForm.getQutype());
		question.setSelectOption(questionForm.getSelectOption());
		Examtype examtype=new Examtype();
		examtype.setTesttime(new Timestamp(System.currentTimeMillis()));
		examtype.setTesttitle("下午三点考试");
		//question.setExamtype(examtype);
		//System.out.println(questionForm.getExamtype()+","+questionForm.getQutitle()+","+questionForm.getSelectOption());
		try {
			examtypeService.addExamtype(examtype);
			questionService.AddQuestion(question);
			//System.out.println("add ok");
			request.setAttribute("addQueMsg", "录入试题成功，请继续录入下一道试题");
		} catch (Exception e) {
			// TODO: handle exception
			//System.out.println("add error");
			//return mapping.findForward("addQuestion");
			request.setAttribute("addQueMsg", "录入试题失败，请重新录入");
			throw new RuntimeException(e.getMessage());
		}
		return mapping.findForward("addQuestion");
	}
	
	public ActionForward everyQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
		String str_id=request.getParameter("id");
		if(str_id!=null && !str_id.equals("")){
			Question question=questionService.findById(Integer.parseInt(str_id));
			request.setAttribute("question", question);
			return mapping.findForward("showEveryQuestion");
		}
		return null;
	}
	
	public ActionForward toUpdateQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
		String str_id=request.getParameter("id");
		Integer id=1;
		if(str_id!=null && !str_id.equals("")){
			System.out.println(str_id);
			id=Integer.parseInt(str_id);
			Question question=questionService.findById(id);
			request.getSession().setAttribute("question", question);
			request.getSession().setAttribute("id", id);
			return mapping.findForward("updateQuestion");
		}
		return null;
	}
	
	public ActionForward updateQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
		Integer id=(Integer) request.getSession().getAttribute("id");
		Question question=new Question();
		question.setId(id);
		question.setQuAnswer(questionForm.getQuAnswer());
		question.setQuhard(questionForm.getQuhard());
		question.setQuscore(Integer.parseInt(questionForm.getQuscore()));
		question.setQutitle(questionForm.getQutitle());
		question.setQutype(questionForm.getQutype());
		question.setSelectOption(questionForm.getSelectOption());
		try {
			questionService.updateQuestion(question);
			request.setAttribute("updateMsg","修改成功，请返回试题管理页面" );
			return mapping.findForward("operQueOk");
		} catch (Exception e) {
			// TODO: handle exception
			request.setAttribute("updateMsg", "修改失败，请返回试题管理页面重新选择操作");
			//throw new RuntimeException(e.getMessage());
			return mapping.findForward("operQueError");
		}
	}
	
	public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//QuestionForm questionForm = (QuestionForm) form;// TODO Auto-generated method stub
			String str_id=request.getParameter("id");
			if(str_id!=null && !str_id.equals("")){
				Integer id=Integer.parseInt(str_id);
				try {
					questionService.deleteById(id);
					request.setAttribute("deleteMsg", "删除成功，请返回试题管理页面");
					return mapping.findForward("operQueOk");
				} catch (Exception e) {
					// TODO: handle exception
					request.setAttribute("deleteMsg", "删除失败，请返回试题管理页面，重新选择操作");
					return mapping.findForward("operQueError");
				}
			}
			return null;
	}
}